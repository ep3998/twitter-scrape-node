#!/usr/bin/env node
"use strict";

//module dependencies
var server = require("../dist/server");
var debug = require("debug")("express:server");
var http = require("http");
var request = require("request");
var cron = require("node-cron");

//create http server
var httpPort = normalizePort(process.env.PORT || 7080);
var app = server.Server.bootstrap().app;
app.set("port", httpPort);
var httpServer = http.createServer(app);

//Initialize io
var io = require('socket.io')(httpServer);
io.on('connection', function(client){
  console.log('user connected');

  client.on('test', onTest);
  client.on('disconnect', onDisconnect);

  function onTest(data){
      console.log('Receive: "' + data + '" from client: ' + client.id);

      var reply = {
          message: "Cheers, " + client.id + " - message: " + data,
          time: 0
      }
      io.emit('reply', reply);
  }

  function onDisconnect(){
      console.log('Disconnected from client: ' + client.id);
      client.removeListener('test', onTest);
      client.removeListener('disconnect', onDisconnect);
  }
});

//Test cron calls
cron.schedule('*/5 * * * * *', function() {
   console.log('running every 5 seconds');
    var options = { method: 'GET',
        url: 'http://httpbin.org/ip',
        headers:
            { 'cache-control': 'no-cache' },
        time: true
    };

    request(options, function (error, response, body) {
        if (error) throw new Error(error);

        console.log(body);

        var reply = {
            message: body,
            time: response.timingPhases.total
        }
        io.emit('reply', reply);
    });
});

//listen on provided ports
httpServer.listen(httpPort);

//add error handler
httpServer.on("error", onError);

//start listening on port
httpServer.on("listening", onListening);

//test nodemon
/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
    if (error.syscall !== "listen") {
        throw error;
    }

    var bind = typeof port === "string"
        ? "Pipe " + port
        : "Port " + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case "EACCES":
            console.error(bind + " requires elevated privileges");
            process.exit(1);
            break;
        case "EADDRINUSE":
            console.error(bind + " is already in use");
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
    var addr = httpServer.address();
    var bind = typeof addr === "string"
        ? "pipe " + addr
        : "port " + addr.port;
    debug("Listening on " + bind);
}